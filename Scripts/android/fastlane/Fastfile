# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
PATH_ROOT = File.expand_path(File.join(File.dirname(__FILE__), "../.."))
PATH_OUTPUT_VN = File.join(PATH_ROOT, "/app/build/outputs/apk/vietnam/release")
PATH_OUTPUT_TH = File.join(PATH_ROOT, "/app/build/outputs/apk/thai/release")
COUNTRY_VN = "vn"
COUNTRY_TH = "th"

default_platform(:android)

desc "Development"
lane :dev do |options|
    _start(options, "false", "true")
    recipient = options.fetch(:recipient, "")
    _ocha_app_upload(options)
    _send_email(recipient, "", "") end

desc "Development - Local bundle"
lane :dev_local do |options|
    _start(options, "false", "false")
    recipient = options.fetch(:recipient, "")
    _ocha_app_upload(options)
    _send_email(recipient, "Use local bundle", "")
end

desc "Release"
lane :release do |options|
    _start(options, "true", "true")
    _send_email("all", "appstore", "release")
end

desc "Release - Local bundle"
lane :release_local do |options|
    _start(options, "true", "false")
    _send_email("all", "appstore", "release")
end

desc "Test upload to ocha app"
lane :upload do |options|
    _ocha_app_upload(options)
end

def _start(options, is_release, should_update_bundle)
    recipient = options.fetch(:recipient, "")
    version_code = options.fetch(:version_code, "")
    version_name = options.fetch(:version_name, "")
    country = options.fetch(:country, "vn")

    Dir.chdir("../..") do
        _public_release(is_release)
        if should_update_bundle == 'true'
            Dir.chdir("misc/fastlane") do
                _update_rn_version()
                _update_bundle()
            end
        end
    end
    _build(country, version_code, version_name)
end

def _build(country, version_code, version_name)
    if country == "vn" or country == 0
        flavor = "Vietnam"
    else
        flavor = "Thai"
    end

    Dir.chdir("..") do
        sh ("sh download_sources")
    end
    Dir.chdir("..") do
        if version_name == "" || version_code == ""
            gradle(
                task: "assemble",
                flavor: flavor,
                build_type: "Release",
                flags: "--offline"
            )
        else
            gradle(
                task: "assemble",
                flavor: flavor,
                build_type: "Release",
                flags: "--offline",
                properties: {
                    "versionCode" => version_code.to_i,
                    "versionName" => version_name,
                }
            )
        end
    end
end

def _update_bundle()
    sh "sh bundle_android.sh"
end

def _update_rn_version()
    py_file = 'update_rn_version.py'
    sh "python -c 'import sys; sys.dont_write_bytecode = True; import update_rn_version; update_rn_version.update()'"
    Dir.chdir("../../ocha-crm-rn") do
        sh "npm install"
    end
end

def _public_release(option)
    sh ("echo 'sdk.dir=$ANDROID_HOME' > local.properties")
    sh ("echo 'APP_RELEASE_STORE_FILE=../android.jks' > local.properties")
    sh ("echo 'APP_RELEASE_STORE_PASSWORD=android' > local.properties")
    sh ("echo 'APP_RELEASE_KEY_ALIAS=CRMkey' > local.properties")
    sh ("echo 'APP_RELEASE_KEY_PASSWORD=crmkey' > local.properties")
    sh ("echo 'public_release=#{option}' > local.properties")
end

def _checkout_lastest_tag()
    tag = sh "git describe --tags `git rev-list --tags --max-count=1`" # gets tags across all branches, not just the current branch
    sh "git checkout #{tag}"
end

def _send_email(recipient, build_comment, build_type)
    puts "Sending mail"
    py_file = 'MailUtils'

    native_commit = (sh ("git log -1 --pretty=%B"))
    rn_commit = ''
    Dir.chdir("../../ocha-crm-rn") do
        rn_commit = (sh ("git log -1 --pretty=%B"))
    end
    last_commit = "[android]#{native_commit} [rn]#{rn_commit}"

    params = {'recipient':recipient,'build_type':build_type,'build_comment':build_comment,'git_last_commit':last_commit}.to_json

    # sh "python -c 'import sys; sys.dont_write_bytecode = True; import #{py_file}; #{py_file}.send_email(#{params})'"
end

def _ocha_app_upload(options)
    puts "Uploading to ocha app site"
    py_file = "UploadUtils"

    country = options.fetch(:country, COUNTRY_VN)
    description = options.fetch(:description, "")
    output_dir = PATH_OUTPUT_VN if country == "vn" else PATH_OUTPUT_TH
    params = {'output_dir': output_dir, 'country': country, 'description': description}.to_json
    sh "python -c 'import sys; sys.dont_write_bytecode = True; import #{py_file}; #{py_file}.upload_ipa(#{params})'"
end

