# This file contains the fastlane.tools configuration
#
# You can find the documentation at https://docs.fastlane.tools
# For a list of all available actions, check out 
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#

#     https://docs.fastlane.tools/plugins/available-plugins
# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
require 'seaios/beeflight'
require 'seaios/icon_baker'

BF_API_TOKENS = "BAhJIiw5Ojo3YzNiZjlmOC05MTQ5LTQ4ZTgtYTYzMi0zOTUzOGMxZTYwNzAGOgZFVA==--ffad4a936d0888f3f7aac3a05e77265368159e1a"
BF_TEAM_TOKENS = "BAhJIiw0Ojo4NTgyZjlkNS1jMGFkLTQ0ZTEtOTRjNC0xOTQ5ZjliNDdlZjkGOgZFVA==--de53b3841f7a20974407a62cc73ff94fe9f32827" 



default_platform(:ios)
platform :ios do
    
    before_all do
        PATH_ROOT = File.expand_path(File.join(File.dirname(__FILE__), ".."))
        PATH_OUTPUT = File.join(PATH_ROOT, ENV['OUTPUT'])
        PATH_WSP = File.join(PATH_ROOT, ENV['WSP'])
        PATH_ICON = File.join(PATH_ROOT, ENV['ICON'])
        PATH_PLIST = File.join(PATH_ROOT, ENV['PLIST'])
    end
    

    desc "Development"
    lane :dev do |options|
        build_number = options.fetch(:build_number, "")
        if build_number != ""
            _update_version(build_number)
        end

        _cleanup()
        _icon_restore()
        _icon_baker()
        _update_bundle()
        _start()
        
        description = options.fetch(:description, "")
        _ocha_app_upload(description)

        recipient = options.fetch(:recipient, "")
        build_comment = options.fetch(:build_comment, "")
        _send_email(recipient, build_comment, "dev")
    end

    desc "Release"
    lane :release do |options|
        _cleanup()
        _icon_restore()
        _update_bundle()
        _start()
        
        recipient = options.fetch(:recipient, "")
        build_comment = options.fetch(:build_comment, "")
        _send_email(recipient, build_comment, "release")
    end

    desc "Update bundle"
    lane :update_bundle do |options|
        _update_bundle()
    end

    desc "Use local bundle"
    lane :local do |options|
        build_number = options.fetch(:build_number, "") 
        if build_number != ""
            _update_version(build_number)
        end

        _cleanup()
        _icon_restore()
        _icon_baker()
        _update_bundle()
        _start()

    end
    
    def _cleanup()
        sh "rm", "-rf", PATH_OUTPUT
    end

    def _start()
        export_provisioning = {
            ENV['BUNDLE_ID'] => ENV['PROVISIONING_NAME']
        }

        # for mac mini slave build
        begin
	        xcode_select("/Applications/Xcode10.1.app")
        rescue
            puts "No Xcode 10.1 found"
        end

        gym(
            scheme: ENV['SCHEME'],
            configuration: ENV['CONFIGURATION'],
            silent: true,
            include_bitcode: false,
            export_options: {
                method: 'enterprise',
                provisioningProfiles: export_provisioning,
                uploadBitcode: false,
                uploadSymbols: ENV['CONFIGURATION'] == 'Release',
                compileBitcode: false,
            },
            workspace: PATH_WSP,
            output_directory: PATH_OUTPUT,
            clean: true,
            sdk: "iphoneos",
            skip_profile_detection: true
            )
        end

    def _beeflight_upload()
        Seaios::BeeFlight.upload(
            dir: PATH_OUTPUT,
            output_dir: PATH_OUTPUT,
            tag: "OchaCRM",
            api_token: BF_API_TOKENS,
            team_token: BF_TEAM_TOKENS
        )
    end

    def _ocha_app_upload(description)
        puts "Uploading to ocha app site"
        py_file = "UploadUtils"
        params = {'output_dir': PATH_OUTPUT, 'country': ENV['COUNTRY'], 'description': description}.to_json
        sh "python -c 'import sys; sys.dont_write_bytecode = True; import #{py_file}; #{py_file}.upload_ipa(#{params})'"
    end

    def _send_email(recipient, build_comment, build_type)
        puts "Sending mail"
        py_file = 'MailUtils'

        native_commit = (sh ("git log -1 --pretty=%B"))
        rn_commit = ''
        Dir.chdir("../ocha-crm-rn") do
            rn_commit = (sh ("git log -1 --pretty=%B"))
        end
        last_commit = "\n[iOS]#{native_commit} [rn]#{rn_commit}"

        params = {'recipient':recipient,'build_type':build_type,'build_comment':build_comment,'git_last_commit':last_commit}.to_json

        # sh "python -c 'import sys; sys.dont_write_bytecode = True; import #{py_file}; #{py_file}.send_email(#{params})'"
    end

    def _checkout_rn(branch)
        sh "git submodule init"
        sh "git submodule update"
        Dir.chdir("../ocha-crm-rn") do
            sh ("git checkout master")
            sh ("git checkout -- .")
            sh ("git clean -df")
            sh ("git pull")
            sh ("git checkout origin/#{branch}")
            sh ("npm install")
        end
    end

    def _checkout_lastest_tag()
        tag = sh "git describe --tags `git rev-list --tags --max-count=1`" # gets tags across all branches, not just the current branch
        sh "git checkout #{tag}"
    end

    def _icon_baker()
        Seaios::IconBaker.bake_icons(
            dir: PATH_ICON,
            plist: PATH_PLIST
        )
    end

    def _icon_restore()
        Seaios::IconBaker.restore_icons PATH_ICON
    end

    def _update_bundle()
        _update_event_emitter_path()
        _update_rct_animation_path()
        sh ("sh bundle_ios.sh") 
    end

    def _update_event_emitter_path()
        py_file = 'update_event_emitter_path.py'
        sh "python -c 'import sys; sys.dont_write_bytecode = True; import update_event_emitter_path; update_event_emitter_path.update()'"
    end

    def _update_rct_animation_path()
        py_file = '_update_rct_animation_path.py'
        sh "python -c 'import sys; sys.dont_write_bytecode = True; import update_rct_animation_path; update_rct_animation_path.update()'"
    end

    def _update_version(version)
        Dir.chdir("../OchaCRM") do
            plistFile = ENV['PLIST_NAME']
            current_version = (sh ("/usr/libexec/PlistBuddy -c 'Print CFBundleShortVersionString' #{plistFile}"))
            new_version = (current_version + "." + version).split.join('')
            puts("new_version: #{new_version}")
            sh "/usr/libexec/PlistBuddy -c 'Set CFBundleShortVersionString #{new_version}' #{plistFile}"
            sh "/usr/libexec/PlistBuddy -c 'Set CFBundleVersion #{new_version}' #{plistFile}"
            sh "/usr/libexec/PlistBuddy -c 'Print CFBundleShortVersionString' #{plistFile}"
            sh "/usr/libexec/PlistBuddy -c 'Print CFBundleVersion' #{plistFile}"
        end
    end
end
